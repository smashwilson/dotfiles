#!/usr/bin/env bash
#
# script installs things.

DOTFILES_ROOT=$(cd $(dirname $0)/.. && pwd)

set -euo pipefail

source script/include/output.sh

setup_gitconfig () {
  if [ "${CODESPACES}" = "true" ]; then
    return
  fi

  if [ ! -f git/gitconfig.symlink ]; then
    info "setup gitconfig"

    user ' - What is your github author name?'
    read -e GIT_AUTHORNAME
    user ' - What is your github author email?'
    read -e GIT_AUTHOREMAIL

    sed \
      -e "s/AUTHORNAME/${GIT_AUTHORNAME}/g" \
      -e "s/AUTHOREMAIL/${GIT_AUTHOREMAIL}/g" \
      -e "s#AUTHORHOME#${HOME}#g" \
      git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  if [ -z "${COPY_MODE:-}" ]; then
    ln -s $1 $2
    success "linked $1 to $2"
  else
    cp $1 $2
    success "copied $1 to $2"
  fi
}

install_dotfiles () {
  info "installing dotfiles"

  local OVERWRITE_ALL=${OVERWRITE_ALL:-false}
  local BACKUP_ALL=${BACKUP_ALL:-false}
  local SKIP_ALL=${SKIP_ALL:-false}

  if [ "${CODESPACES}" = "true" ]; then
    info "Codespaces setup triggered."
    OVERWRITE_ALL="true"
  fi

  for SOURCE in $(find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink); do
    DEST="$HOME/.`basename \"${SOURCE%.*}\"`"

    if [ -f $DEST ] || [ -d $DEST ]; then
      LINK_TARGET=$(readlink $DEST || echo $DEST)
      if [ $LINK_TARGET = $SOURCE ]; then
        info "$DEST is already linked."
      else
        local OVERWRITE="false"
        local BACKUP="false"
        local SKIP="false"

        if [ "$OVERWRITE_ALL" == "false" ] && [ "$BACKUP_ALL" == "false" ] && [ "$SKIP_ALL" == "false" ]; then
          user "File already exists: `basename $SOURCE`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
          read -n 1 ACTION

          case "$ACTION" in
            o)
              OVERWRITE="true"
              ;;
            O)
              OVERWRITE_ALL="true"
              ;;
            b)
              BACKUP="true"
              ;;
            B)
              BACKUP_ALL="true"
              ;;
            s)
              SKIP="true"
              ;;
            S)
              SKIP_ALL="true"
              ;;
            *)
              ;;
          esac
        fi

        if [ "$OVERWRITE" == "true" ] || [ "$OVERWRITE_ALL" == "true" ]; then
          rm -rf $DEST
          success "removed $DEST"
        fi

        if [ "$BACKUP" == "true" ] || [ "$BACKUP_ALL" == "true" ]; then
          mv $DEST $DEST\.backup
          success "moved $DEST to $DEST.backup"
        fi

        if [ "$SKIP" == "false" ] && [ "$SKIP_ALL" == "false" ]; then
          link_files $SOURCE $DEST
        else
          success "skipped $SOURCE"
        fi
      fi

    else
      link_files $SOURCE $DEST
    fi

  done
}

echo ''

setup_gitconfig
install_dotfiles
