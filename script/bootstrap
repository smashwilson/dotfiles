#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT=$(cd $(dirname $0)/.. && pwd)

set -e

echo ''

has () {
  which $1 >/dev/null 2>&1
}

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]; then
    info "setup gitconfig"

    user ' - What is your github author name?'
    read -e GIT_AUTHORNAME
    user ' - What is your github author email?'
    read -e GIT_AUTHOREMAIL

    sed -e "s/AUTHORNAME/${GIT_AUTHORNAME}/g" -e "s/AUTHOREMAIL/${GIT_AUTHOREMAIL}/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info "installing dotfiles"

  local OVERWRITE_ALL=${OVERWRITE_ALL:-false}
  local BACKUP_ALL=${BACKUP_ALL:-false}
  local SKIP_ALL=${SKIP_ALL:-false}

  for SOURCE in $(find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink); do
    DEST="$HOME/.`basename \"${SOURCE%.*}\"`"

    if [ -f $DEST ] || [ -d $DEST ]; then
      LINK_TARGET=$(readlink $DEST || echo $DEST)
      if [ $LINK_TARGET = $SOURCE ]; then
        info "$DEST is already linked."
      else
        local OVERWRITE="false"
        local BACKUP="false"
        local SKIP="false"

        if [ "$OVERWRITE_ALL" == "false" ] && [ "$BACKUP_ALL" == "false" ] && [ "$SKIP_ALL" == "false" ]; then
          user "File already exists: `basename $SOURCE`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
          read -n 1 ACTION

          case "$ACTION" in
            o)
              OVERWRITE="true"
              ;;
            O)
              OVERWRITE_ALL="true"
              ;;
            b)
              BACKUP="true"
              ;;
            B)
              BACKUP_ALL="true"
              ;;
            s)
              SKIP="true"
              ;;
            S)
              SKIP_ALL="true"
              ;;
            *)
              ;;
          esac
        fi

        if [ "$OVERWRITE" == "true" ] || [ "$OVERWRITE_ALL" == "true" ]
        then
          rm -rf $DEST
          success "removed $DEST"
        fi

        if [ "$BACKUP" == "true" ] || [ "$BACKUP_ALL" == "true" ]
        then
          mv $DEST $DEST\.backup
          success "moved $DEST to $DEST.backup"
        fi

        if [ "$SKIP" == "false" ] && [ "$SKIP_ALL" == "false" ]
        then
          link_files $SOURCE $DEST
        else
          success "skipped $SOURCE"
        fi
      fi

    else
      link_files $SOURCE $DEST
    fi

  done
}

setup_gitconfig
install_dotfiles

# Install Ansible if necessary.
if ! has ansible-playbook; then
  info "Installing Ansible."
  if has apt-get; then
    info "... from aptitude."
    sudo apt-get install -y ansible
  elif has pip; then
    info "... from pip."
    pip install ansible
  elif has easy_install; then
    info "... from pip by way of easy_install."
    sudo easy_install pip
    pip install ansible
  else
    fail "I don't know how to install Ansible! Install it manually and re-run."
  fi
  success "Ansible has been installed."
fi

info "Updating packages with Ansible."
ansible-playbook -i localhost, ${DOTFILES_ROOT}/script/ansible/site.yml --ask-sudo-pass
success "All done!"
