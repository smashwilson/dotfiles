#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

has () {
  which $1 >/dev/null 2>&1
}

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]; then
    info "setup gitconfig"

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info "installing dotfiles"

  overwrite_all=${OVERWRITE_ALL:-false}
  backup_all=${BACKUP_ALL:-false}
  skip_all=${SKIP_ALL:-false}

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]; then
      LINK_TARGET=$(readlink $dest || echo $dest)
      if [ ! $LINK_TARGET = ${SOURCE} ]; then

        overwrite=false
        backup=false
        skip=false

        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then
          user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
          read -n 1 action

          case "$action" in
            o )
              overwrite=true;;
            O )
              overwrite_all=true;;
            b )
              backup=true;;
            B )
              backup_all=true;;
            s )
              skip=true;;
            S )
              skip_all=true;;
            * )
              ;;
          esac
        fi

        if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
        then
          rm -rf $dest
          success "removed $dest"
        fi

        if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
        then
          mv $dest $dest\.backup
          success "moved $dest to $dest.backup"
        fi

        if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
        then
          link_files $source $dest
        else
          success "skipped $source"
        fi
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

# Install Ansible if necessary.
if ! has ansible-playbook; then
  info "Installing Ansible."
  if has apt-get; then
    info "... from aptitude."
    sudo apt-get install -y ansible
  elif has pip; then
    info "... from pip."
    pip install ansible
  elif has easy_install; then
    info "... from pip by way of easy_install."
    sudo easy_install pip
    pip install ansible
  else
    fail "I don't know how to install Ansible! Install it manually and re-run."
  fi
  success "Ansible has been installed."
fi

info "Updating packages with Ansible."
ansible-playbook -i localhost, ${DOTFILES_ROOT}/script/ansible/site.yml --ask-sudo-pass
success "All done!"
